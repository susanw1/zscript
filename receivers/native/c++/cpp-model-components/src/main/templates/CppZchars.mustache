/*
* Zscript Library - Command System for Microcontrollers)
* Copyright (c) 2022 Zscript team (Susan Witts, Alicia Witts)
*
* SPDX-License-Identifier:Â MIT
*/

#ifndef SRC_MAIN_C___ZSCRIPT_ZCHARS_HPP_
#define SRC_MAIN_C___ZSCRIPT_ZCHARS_HPP_

namespace Zscript {

/**
 * Constants generated from the Zchars intrinsics.
 *
 * Generated(value = "CppZchars.mustache",
 *  date = "{{timeNow}}",
 *  comments = "Zscript Zchars constants list, using {{additional.context-source}}")
 */
enum Zchars {
{{#zchars}}
    /** {{description}} */
    Z_{{#upperUnderscore}}{{name}}{{/upperUnderscore}} = '{{{chEscapedAsC}}}',

{{/zchars}}
};

template<class ZP>
class ZcharsUtils {
public:
    static const int PARSE_NOT_HEX_0X10 = 0x10;

    static uint8_t parseHex(uint8_t b) {
        if (b >= '0' && b <= '9') {
            return b - '0';
        } else if (b >= 'a' && b <= 'f') {
            return b - 'a' + 10;
        } else {
            return PARSE_NOT_HEX_0X10;
        }
    }

    static bool alwaysIgnore(uint8_t b) {
        return 0{{#zchars}}{{#ignoreAlways}} || b == '{{{chEscapedAsC}}}'{{/ignoreAlways}}{{/zchars}};
    }

    static bool shouldIgnore(uint8_t b) {
        return 0{{#zchars}}{{#ignoreInCode}} || b == '{{{chEscapedAsC}}}'{{/ignoreInCode}}{{/zchars}};
    }

    static bool isSeparator(uint8_t b) {
        return 0{{#zchars}}{{#separator}} || b == '{{{chEscapedAsC}}}'{{/separator}}{{/zchars}};
    }

    static bool isNonNumerical(uint8_t b) {
        return 0{{#zchars}}{{#nonNumeric}} || b == '{{{chEscapedAsC}}}'{{/nonNumeric}}{{/zchars}};
    }

    static bool isBigField(uint8_t b) {
        return 0{{#zchars}}{{#bigField}} || b == '{{{chEscapedAsC}}}'{{/bigField}}{{/zchars}};
    }

    static bool mustStringEscape(uint8_t b) {
        return 0{{#zchars}}{{#mustEscape}} || b == '{{{chEscapedAsC}}}'{{/mustEscape}}{{/zchars}};
    }

    static bool isNumericKey(uint8_t b) {
        return (b >= 'A' && b <= 'Z');
    }

    static bool isCommandKey(uint8_t b) {
        return isNumericKey(b) || isBigField(b);
    }

    static bool isAllowableKey(uint8_t b) {
        // disallow hex, non-printing and top-bit-set keys
        return b >= 0x20 && parseHex(b) == PARSE_NOT_HEX_0X10;
    }
};

}
#endif /* SRC_MAIN_C___ZSCRIPT_ZCHARS_HPP_ */
