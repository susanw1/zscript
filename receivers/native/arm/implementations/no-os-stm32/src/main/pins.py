import xml.etree.ElementTree as ElementTree
import sys
import re



for i in range(1, len(sys.argv)):
   
   outputName = re.search('(STM32[^_.(]*)[^.x]{2}', sys.argv[i]).expand('\\1')
   
   pins = set()
   ports = set()
   tree = ElementTree.parse(sys.argv[i])
   root = tree.getroot()
      
   for pin in root.iter("{http://mcd.rou.st.com/modules.php?name=mcu}Pin"):
      match = re.search('^P.\d+', pin.get("Name"))
      if(match):
         pins.add(match.group(0));
#   print(pins)
   
            
   for pin in pins:
      ports.add(pin[1])
      
   
   with open(outputName+".h", "w") as out:
      out.write("/*\n  * This file is automatically generated by pins.py from the xml descriptions provided as part of the STM32Cube IDE\n*/\n\n")
      out.write("#ifndef LOWLEVEL_INCLUDE_DEVICE_PINS\n")
      out.write("#define LOWLEVEL_INCLUDE_DEVICE_PINS\n\n")
      index = 0
      for port in sorted(ports):
         out.write("#define Port" + port + " " + str(index) + "\n");
         index += 1
         
      out.write("\nstruct GpioPinName {\n")

      if(index>0xF):
         out.write("    uint8_t port;\n")
         out.write("    uint8_t pin;\n")
      else:
         out.write("    uint8_t port:4;\n")
         out.write("    uint8_t pin:4;\n")
      out.write("};\n")
      
      out.write('\n');
      prevPort = '-'
      for port in sorted(ports):
         for i in range(16):
            pin = 'P'+port+str(i)
            if(pin in pins):
               if(prevPort != pin[1]):
                  out.write('\n');
                  prevPort = pin[1]
               out.write("#define "+pin + " ((GpioPinName){Port"+pin[1]+ ", Pin"+pin[2:len(pin)]+"})\n");
      out.write("\n#endif /* LOWLEVEL_INCLUDE_DEVICE_PINS */")
      
      

