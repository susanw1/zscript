/*
* Zscript Library - Command System for Microcontrollers)
* Copyright (c) 2022 Zscript team (Susan Witts, Alicia Witts)
*
* SPDX-License-Identifier:Â MIT
*/

#ifndef SRC_MAIN_C___ZSCRIPT_KEYS_{{#upperUnderscore}}{{moduleName}}{{/upperUnderscore}}_HPP_
#define SRC_MAIN_C___ZSCRIPT_KEYS_{{#upperUnderscore}}{{moduleName}}{{/upperUnderscore}}_HPP_

namespace Zscript {

/**
 * {{name}} Module: {{description}}.
 *
 * @version {{version}}
 *
 * Generated(value = "CppCommandKeyDefs.mustache",
 *  date = "{{timeNow}}",
 *  comments = "Module command/response key constants list, using {{additional.context-source}}")
 */
namespace {{#lowerUnderscore}}{{moduleName}}{{/lowerUnderscore}}_module {

{{#commands}}
/**
 * {{description}}
 */
class {{#upperCamel}}{{commandName}}{{/upperCamel}}_CommandDefs {
public:
    static constexpr uint8_t CODE = {{command}};
    static constexpr uint8_t MODULE = {{#module}}{{id}}{{/module}};

protected:

    {{#requestFields}}
        {{#typeDefinition}}
            {{#enumType}}
    /** Enum ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Req{{#upperCamel}}{{name}}{{/upperCamel}}__{{key}} = '{{key}}';
            {{/enumType}}
            {{#numberType}}
    /** Number ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Req{{#upperCamel}}{{name}}{{/upperCamel}}__{{key}} = '{{key}}';
            {{/numberType}}
            {{#bitsetType}}
    /** Bitset ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Req{{#upperCamel}}{{name}}{{/upperCamel}}__{{key}} = '{{key}}';
            {{/bitsetType}}
            {{#flagType}}
    /** Flag ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Req{{#upperCamel}}{{name}}{{/upperCamel}}__{{key}} = '{{key}}';
            {{/flagType}}
            {{#textType}}
    /** Text ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Req{{#upperCamel}}{{name}}{{/upperCamel}}__Txt = '{{key}}';
            {{/textType}}
            {{#bytesType}}
    /** Bytes ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Req{{#upperCamel}}{{name}}{{/upperCamel}}__Bytes = '{{key}}';
            {{/bytesType}}
        {{/typeDefinition}}

    {{/requestFields}}

    {{#responseFields}}
            {{#typeDefinition}}
            {{#enumType}}
    /** Enum ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Resp{{#upperCamel}}{{name}}{{/upperCamel}}__{{key}} = '{{key}}';

    /** Enum of acceptable values for '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field. */
    enum class Resp{{#upperCamel}}{{name}}{{/upperCamel}}_Values : uint8_t {
        {{#values}}{{#lowerCamel}}{{.}}{{/lowerCamel}}_value, {{/values}}
    };
            {{/enumType}}
            {{#numberType}}
    /** Number ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Resp{{#upperCamel}}{{fieldName}}{{/upperCamel}}__{{key}} = '{{key}}';
            {{/numberType}}
            {{#bitsetType}}
    /** Bitset ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Resp{{#upperCamel}}{{fieldName}}{{/upperCamel}}__{{key}} = '{{key}}';

    /** Enum of bit-positions for '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field. */
    enum class Resp{{#upperCamel}}{{fieldName}}{{/upperCamel}}_BitPositions : uint8_t {
                {{#bits}}
        {{#lowerCamel}}{{name}}{{/lowerCamel}}_bitPosition,
                {{/bits}}
    };
    /** Enum of bit fields (ie 1<<posn) for '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field. */
    enum class Resp{{#upperCamel}}{{fieldName}}{{/upperCamel}}_Values : uint16_t {
                {{#bits}}
        /** Bit field: {{description}} */
        {{#lowerCamel}}{{name}}{{/lowerCamel}}_field = (1 << (int) Resp{{#upperCamel}}{{fieldName}}{{/upperCamel}}_BitPositions::{{#lowerCamel}}{{name}}{{/lowerCamel}}_bitPosition),
                {{/bits}}
    };
            {{/bitsetType}}
            {{#flagType}}
    /** Flag ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Resp{{#upperCamel}}{{name}}{{/upperCamel}}__{{key}} = '{{key}}';
            {{/flagType}}
            {{#textType}}
    /** Text ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Resp{{#upperCamel}}{{name}}{{/upperCamel}}__Txt = '{{key}}';
            {{/textType}}
            {{#bytesType}}
    /** Bytes ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Resp{{#upperCamel}}{{name}}{{/upperCamel}}__Bytes = '{{key}}';
            {{/bytesType}}
            {{#commandsType}}
    /** Commands ({{#required}}Required{{/required}}{{^required}}Optional{{/required}}): {{description}} */
    static constexpr uint8_t Resp{{#upperCamel}}{{name}}{{/upperCamel}}__{{key}} = '{{key}}';
            {{/commandsType}}
        {{/typeDefinition}}

    {{/responseFields}}
};  // {{#upperCamel}}{{commandName}}{{/upperCamel}}_CommandDefs

{{/commands}}

} // {{#lowerUnderscore}}{{moduleName}}{{/lowerUnderscore}}_module
} // Zscript
#endif /* SRC_MAIN_C___ZSCRIPT_KEYS_{{#upperUnderscore}}{{moduleName}}{{/upperUnderscore}}_HPP_ */
