package {{additional.package-elements}};

import java.util.Optional;
import java.util.OptionalInt;
import java.util.Set;

import javax.annotation.processing.Generated;

import net.zscript.javaclient.commandbuilder.ZscriptCommandBuilder;
import net.zscript.javaclient.commandbuilder.ZscriptResponse;
import net.zscript.javaclient.commandbuilder.ZscriptUnparsedCommandResponse;
import net.zscript.javareceiver.tokenizer.Zchars;

/**
 * {{name}} Module: {{description}}.
 *
 * @version {{version}}
 */
@Generated(value = "JavaCommandBuilder.mustache",
           date = "{{timeNow}}",
           comments = "Zscript Java fluent Command/Response builder generator, using {{additional.context-source}}")
public class {{name}}Module {
    public static final int    MODULE_ID = {{id}};
    public static final String MODULE_NAME = "{{name}}";
    public static final String VERSION = "{{version}}";
    public static final String DESCRIPTION = "{{description}}"; 
    
{{#commands}}
    public static {{#upperCamel}}{{name}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}() {
        return new {{#upperCamel}}{{name}}CommandBuilder{{/upperCamel}}();
    }

    /**
     * {{description}}
     */
    public static class {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} extends ZscriptCommandBuilder<{{#upperCamel}}{{name}}CommandBuilder{{/upperCamel}}.{{#upperCamel}}{{name}}{{/upperCamel}}CommandResponse> {
    
        public static final byte CMD_ID = {{command}};

        private {{#upperCamel}}{{name}}CommandBuilder{{/upperCamel}}() {
            setRequiredFields(new byte[] { {{#requestFields}}{{#required}}(byte) '{{key}}', {{/required}}{{/requestFields}}}); 
            setField(Zchars.Z_CMD, {{fullCommand}});
        }

    {{#requestFields}}
        {{#typeDefinition}}
            {{#enumType}}
{{ ! ENUM SETTERS }}
        /**
         * Enum of acceptable values for {@link #{{name}}} field.
         */
        public static enum {{#upperCamel}}{{name}}{{/upperCamel}} {
            {{#allowedValues}}
            {{#upperCamel}}{{.}}{{/upperCamel}},            
            {{/allowedValues}}
        }
        
        /**
         * Sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         *
         * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, using the supplied numerical value.
         * @return this builder, to facilitate method chaining 
         * @throws IllegalArgumentException if the value is out of range of the available values
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final int value) {
            if (value < 0 || value >= {{#upperCamel}}{{name}}{{/upperCamel}}.values().length) {
                throw new IllegalArgumentException("{{#upperCamel}}{{name}}{{/upperCamel}} value out of range");
            }
            setField((byte) '{{key}}', value);
            return this;
        }

        /**
         * Sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         *
         * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an enum (never null)
         * @return this builder, to facilitate method chaining 
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final {{#upperCamel}}{{name}}{{/upperCamel}} value) {
            return {{#lowerCamel}}{{name}}{{/lowerCamel}}(value.ordinal());
        }

                {{^required}}
        /**
         * Optionally sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         *
         * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an OptionalInt
         * @return this builder, to facilitate method chaining 
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final OptionalInt value) {
            return value.isPresent() ? {{#lowerCamel}}{{name}}{{/lowerCamel}}(value.getAsInt()) : this;
        }

        /**
         * Optionally sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         *
         * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an Optional enum
         * @return this builder, to facilitate method chaining 
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final Optional<{{#upperCamel}}{{name}}{{/upperCamel}}> value) {
            return value.isPresent() ? {{#lowerCamel}}{{name}}{{/lowerCamel}}(value.get()) : this;
        }
         
        /**
         * Optionally sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         *
         * @param set       if true, then set the field; otherwise, ignore it
         * @param value     the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set
         * @return this builder, to facilitate method chaining
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final boolean set, final {{#upperCamel}}{{name}}{{/upperCamel}} value) {
            return set ? {{#lowerCamel}}{{name}}{{/lowerCamel}}(value) : this;
        }
                {{/required}}        
            {{/enumType}}
            {{#numberType}}
{{ ! NUMBER SETTERS }}
        /**
         * Optionally sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         *
         * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, using the supplied numerical value
         * @return this builder, to facilitate method chaining 
         * @throws IllegalArgumentException if the value is out of range of the available values
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final int value) {
            setField((byte)'{{key}}', value);
            return this;
        }

                {{^required}}
        /**
         * Optionally sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         *
         * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an OptionalInt
         * @return this builder, to facilitate method chaining 
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final OptionalInt value) {
            return value.isPresent() ? {{#lowerCamel}}{{name}}{{/lowerCamel}}(value.getAsInt()) : this;
        }

        /**
         * Optionally sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         *
         * @param set       if true, then set the field; otherwise, ignore
         * @param value     the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set
         * @return this builder, to facilitate method chaining
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final boolean set, final int value) {
            return set ? {{#lowerCamel}}{{name}}{{/lowerCamel}}(value) : this;
        }
                {{/required}}        
            {{/numberType}}
            {{#flagType}}
{{ ! FLAG SETTERS }}
        /**
         * Sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         *
         * @return this builder, to facilitate method chaining 
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}() {
            setField((byte)'{{key}}', 0);
            return this;
        }

        /**
         * Sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         *
         * @param set       if true, then set the field; otherwise, ignore it
         * @return this builder, to facilitate method chaining 
         * @throws IllegalArgumentException if the value is out of range of the available values
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final boolean set) {
            return set ? {{#lowerCamel}}{{name}}{{/lowerCamel}}() : this;
        }

            {{/flagType}}
            {{#bitsetType}}
{{ ! BITSET SETTERS }}
        /**
         * Enum of acceptable values for {@link #{{name}}} field.
         */
        public static enum {{#upperCamel}}{{name}}{{/upperCamel}} {
            {{#bitFields}}
            /** {{description}} */
            {{#upperCamel}}{{name}}{{/upperCamel}}, 
            {{/bitFields}}
        }
        
        /**
         * Sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         * <p>
         * This sets the field, overwriting any previously set bits.
         *
         * @param bits      the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, using the supplied int value representing the OR'ed bits (overwriting any existing set bits)
         * @return this builder, to facilitate method chaining 
         * @throws IllegalArgumentException if the value is out of range of the available values
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final int bits) {
            if (bits < 0 || bits >= (1 << {{#upperCamel}}{{name}}{{/upperCamel}}.values().length)) {
                throw new IllegalArgumentException("{{#upperCamel}}{{name}}{{/upperCamel}} value out of range");
            }
            setField((byte) '{{key}}', bits);
            return this;
        }

        /**
         * Sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         * <p>
         * This sets the field, overwriting any previously set bits (even if the Set is empty). This method is aimed at facilitating use of EnumSet.of(). 
         *
         * @param bits      the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as a Set of enums (never null)
         * @return this builder, to facilitate method chaining 
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final Set<{{#upperCamel}}{{name}}{{/upperCamel}}> bits) {
            int newBits = bits.stream().mapToInt(a -> (1 << a.ordinal())).reduce((a, b) -> a | b).orElse(0);
            return {{#lowerCamel}}{{name}}{{/lowerCamel}}(newBits);
        }

        /**
         * Sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         * <p>
         * This ORs the supplied bit onto the field's existing value - it does NOT overwrite. 
         *
         * @param bit    the bit in the {{#lowerCamel}}{{name}}{{/lowerCamel}} field to set, as a single enum (never null)
         * @return this builder, to facilitate method chaining 
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final {{#upperCamel}}{{name}}{{/upperCamel}} bit) {
            return {{#lowerCamel}}{{name}}{{/lowerCamel}}(getField((byte) '{{key}}') | (1 << bit.ordinal()));
        }


                {{^required}}
        /**
         * Optionally sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         * <p>
         * If 'bits' is non-empty, this sets the whole field, overwriting any previously set bits.
         *
         * @param bit   the complete value of the field to set
         * @return this builder, to facilitate method chaining 
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final OptionalInt bit) {
            return bit.isPresent() ? {{#lowerCamel}}{{name}}{{/lowerCamel}}(bit.getAsInt()) : this;
        }

        /**
         * Optionally sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         * <p>
         * If 'bit' is non-empty, this sets the whole field, overwriting any previously set bits.
         *
         * @param value  the bit in the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an Optional enum
         * @return this builder, to facilitate method chaining 
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final Optional<{{#upperCamel}}{{name}}{{/upperCamel}}> bit) {
            return bit.isPresent() ? {{#lowerCamel}}{{name}}{{/lowerCamel}}(bit.get()) : this;
        }
         
        /**
         * Optionally sets the {{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
         * <p>
         * If 'set' is true, then this ORs the supplied bit onto the field's existing value - it does NOT overwrite. 
         *
         * @param set       if true, then set the field; otherwise, ignore it
         * @param value     the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set
         * @return this builder, to facilitate method chaining
         */
        public {{#upperCamel}}{{commandName}}CommandBuilder{{/upperCamel}} {{#lowerCamel}}{{name}}{{/lowerCamel}}(final boolean set, final {{#upperCamel}}{{name}}{{/upperCamel}} value) {
            return set ? {{#lowerCamel}}{{name}}{{/lowerCamel}}(value) : this;
        }
                {{/required}}        
            {{/bitsetType}}
            {{#bitsetType}}
{{ ! BITSET SETTERS }}
            {{/bitsetType}}
        {{/typeDefinition}}
    {{/requestFields}}

        @Override
        protected boolean commandCanFail() {
            return {{#status}}true|{{/status}}{{^status}}false|{{/status}}false;
        }

        @Override
        protected {{#upperCamel}}{{name}}CommandResponse{{/upperCamel}} parseResponse(ZscriptUnparsedCommandResponse resp) {
            return new {{#upperCamel}}{{name}}CommandResponse{{/upperCamel}}(resp);
        }

        public static class {{#upperCamel}}{{name}}CommandResponse{{/upperCamel}} implements ZscriptResponse {
            private final ZscriptUnparsedCommandResponse resp;

            public {{#upperCamel}}{{name}}CommandResponse{{/upperCamel}}(ZscriptUnparsedCommandResponse resp) {
                this.resp = resp;
            }
            
        }
    }
    
    
{{/commands}}
}
