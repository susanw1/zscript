{{#typeDefinition}}
    {{#enumType}}
    {{! ============ ENUM GETTERS ============= }}
            /**
             * Enum of acceptable values for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') enum field.
             */
            public static enum {{#upperCamel}}{{{fieldName}}}{{/upperCamel}} {
            {{#values}}
                {{#upperCamel}}{{.}}{{/upperCamel}},
            {{/values}}
            }

        {{#required}}
            // ============ ENUM GETTERS - required field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============

            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this required field
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            public int get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsInt() {
                int value = expression.getFieldValue('{{key}}')
                        .orElseThrow(() -> new ZscriptMissingFieldException("name={{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}, key='{{key}}'"));
                return checkInEnumRange(value, {{#upperCamel}}{{{fieldName}}}{{/upperCamel}}.class, '{{key}}', false);
            }

            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this required field
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            @Nonnull
            public {{#upperCamel}}{{{fieldName}}}{{/upperCamel}} get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return {{#upperCamel}}{{{fieldName}}}{{/upperCamel}}.values()[get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsInt()];
            }
        {{/required}}
        {{^required}}
            // ============ ENUM GETTERS - optional field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============

            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this non-required field
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            @Nonnull
            public OptionalInt get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsInt() {
                final OptionalInt field = expression.getFieldValue('{{key}}');
                if (field.isPresent()) {
                    checkInEnumRange(field.getAsInt(), {{#upperCamel}}{{{fieldName}}}{{/upperCamel}}.class, '{{key}}', false);
                }
                return field;
            }

            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this non-required field as enum
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            @Nonnull
            public Optional<{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}> get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                OptionalInt valueOpt = get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsInt();
                return valueOpt.stream().mapToObj(v -> {{#upperCamel}}{{{fieldName}}}{{/upperCamel}}.values()[v]).findFirst();
            }

            /**
             * Determines if the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field is set: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return true if this field is set, false otherwise
             */
            public boolean has{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return expression.hasField((byte) '{{key}}');
            }
        {{/required}}
    {{/enumType}}
    {{#uint16Type}}
        {{! ============ UINT16-TYPE GETTERS ============= }}
        {{#required}}
            // ============ UINT16-TYPE GETTERS - required field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============
            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this required field
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            public int get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return expression.getFieldValue('{{key}}')
                        .orElseThrow(() -> new ZscriptMissingFieldException("name={{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}, key='{{key}}'"));
            }
        {{/required}}
        {{^required}}
            // ============ UINT16-TYPE GETTERS - optional field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============
            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this non-required field, or empty if not set
             */
            @Nonnull
            public OptionalInt get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return expression.getFieldValue('{{key}}');
            }

            /**
             * Determines if the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field is set: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return true if this field is set, false otherwise
             */
            public boolean has{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return expression.hasField((byte) '{{key}}');
            }
        {{/required}}
    {{/uint16Type}}
    {{#uint32Type}}
        {{! ============ UINT32-TYPE GETTERS ============= }}
        {{#required}}
            // ============ UINT32-TYPE GETTERS - required field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============
            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this required field
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            public long get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return expression.getFieldValue32('{{key}}')
                        .orElseThrow(() -> new ZscriptMissingFieldException("name={{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}, key='{{key}}'"));
            }
        {{/required}}
        {{^required}}
            // ============ UINT32-TYPE GETTERS - optional field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============
            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this non-required field, or empty if not set
             */
            @Nonnull
            public OptionalLong get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return expression.getFieldValue32('{{key}}');
            }

            /**
             * Determines if the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field is set: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return true if this field is set, false otherwise
             */
            public boolean has{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return expression.hasField((byte) '{{key}}');
            }
        {{/required}}
    {{/uint32Type}}
    {{#flagType}}
        {{! ============ FLAG-TYPE GETTERS ============= }}
            // ============ FLAG-TYPE GETTERS - field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============
            /**
             * Checks if the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field is set: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return true if this field is set, false otherwise
             */
            public boolean is{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return expression.hasField((byte) '{{key}}');
            }
    {{/flagType}}
    {{#bitsetType}}
        {{! ============ BITSET-TYPE GETTERS ============= }}
            /**
             * Enum of acceptable values for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') bitset field.
             */
            public static enum {{#upperCamel}}{{{fieldName}}}{{/upperCamel}} {
            {{#bits}}
                /** {{description}} */
                {{#upperCamel}}{{bitName}}{{/upperCamel}},
            {{/bits}}
            }

        {{#required}}
            // ============ BITSET-TYPE GETTERS - required field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============
            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this required field as a int, with bits OR'ed together
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available bit values
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            public int get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsInt() {
                final int value = expression.getFieldValue('{{key}}')
                        .orElseThrow(() -> new ZscriptMissingFieldException("name={{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}, key='{{key}}'"));
                return checkInEnumRange(value, {{#upperCamel}}{{{fieldName}}}{{/upperCamel}}.class, '{{key}}', true);
            }

            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this required field, with the bits represented as an EnumSet
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available bit values
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            @Nonnull
            public EnumSet<{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}> get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return bitsetToEnumSet(get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsInt(), {{#upperCamel}}{{{fieldName}}}{{/upperCamel}}.class);
            }
        {{/required}}
        {{^required}}
            // ============ BITSET-TYPE GETTERS - optional field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============
            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this non-required field, or empty if not set
             */
            @Nonnull
            public OptionalInt get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsInt() {
                return expression.getFieldValue('{{key}}');
            }

            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this required field, with the bits represented as an EnumSet; if field is missing, the EnumSet is empty.
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available bit values
             */
            @Nonnull
            public EnumSet<{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}> get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return bitsetToEnumSet(get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsInt().orElse(0), {{#upperCamel}}{{{fieldName}}}{{/upperCamel}}.class);
            }

            /**
             * Determines if the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field is set: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return true if this field is set, false otherwise
             */
            public boolean has{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return expression.hasField((byte) '{{key}}');
            }
        {{/required}}
    {{/bitsetType}}
    {{#stringType}}
        {{! ============ STRING-TYPE (BOTH TEXT AND BYTES) GETTERS ============= }}
        {{#required}}
            // ============ STRING-TYPE (BOTH TEXT AND BYTES) GETTERS - required field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============

            /**
             * Returns the string <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> data as ByteString: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the string data, as ByteString
             */
            @Nonnull
            public ByteString get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsByteString() {
                return expression.getFieldAsByteString((byte) '{{key}}')
                        .orElseThrow(() -> new ZscriptMissingFieldException("name={{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}, key='{{key}}'"));
            }

            /**
             * Returns the string <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> data as bytes: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the string data, as bytes
             */
            @Nonnull
            public byte[] get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsBytes() {
                return get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsByteString().toByteArray();
            }

            /**
             * Returns the string <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> data as a String: {{description}}
             * <p>
             * The bytes are interpreted as encoded as UTF-8.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the string data, as a String
             */
            @Nonnull
            public String get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsString() {
                return get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsByteString().asString();
            }
        {{/required}}
        {{^required}}
            // ============ STRING-TYPE (BOTH TEXT AND BYTES) GETTERS - optional field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============

            /**
             * Returns the string <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> data, if present, as ByteString: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the string data, as ByteString
             */
            @Nonnull
            public Optional<ByteString> get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsByteString() {
                return expression.getFieldAsByteString((byte) '{{key}}');
            }

            /**
             * Returns the string <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> data, if present, as bytes: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the string data, as bytes
             */
            @Nonnull
            public Optional<byte[]> get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsBytes() {
                return get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsByteString().map(s -> s.toByteArray());
            }

            /**
             * Returns the string <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> data, if present, as a String: {{description}}
             * <p>
             * The bytes are interpreted as encoded as UTF-8.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the string data, as a String
             */
            @Nonnull
            public Optional<String> get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsString() {
                return get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsByteString().map(s -> s.asString());
            }

            /**
             * Determines if the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field is set: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return true if this field is set, false otherwise
             */
            public boolean has{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return expression.hasField((byte) '{{key}}');
            }
        {{/required}}
    {{/stringType}}
    {{#textType}}
        {{! ============ TEXT-TYPE GETTERS ============= }}
        {{#required}}
            // ============ TEXT-TYPE GETTERS - required field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============

            /**
            * Returns the string <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> data as text: {{description}}
            * <p>
            * The bytes are interpreted as encoded as UTF-8.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
            *
            * @return the string data, as a String
            */
            @Nonnull
            public String get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsString();
            }

        {{/required}}
        {{^required}}
            // ============ TEXT-TYPE GETTERS - optional field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============

            /**
            * Returns the string <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> data, if present, as text: {{description}}
            * <p>
            * The bytes are interpreted as encoded as UTF-8.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
            *
            * @return the string data, as a String
            */
            @Nonnull
            public Optional<String> get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsString();
            }

        {{/required}}

    {{/textType}}
    {{#bytesType}}
        {{! ============ BYTES-TYPE GETTERS ============= }}
        {{#required}}
            // ============ BYTES-TYPE GETTERS - required field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============

            /**
             * Returns the string <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> data as bytes: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the string data, as bytes
             */
            @Nonnull
            public byte[] get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsBytes();
            }

        {{/required}}
        {{^required}}
            // ============ BYTES-TYPE GETTERS - optional field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============

            /**
             * Returns the string <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> data, if present, as bytes: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the string data, as bytes
             */
            @Nonnull
            public Optional<byte[]> get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsBytes();
            }

        {{/required}}
    {{/bytesType}}
    {{#commandsType}}
        {{! ============ COMMANDS-TYPE GETTERS ============= }}
            // ============ COMMANDS-TYPE GETTERS - field "{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}" ('{{key}}') =============
            /**
             * Gets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the value of this required field
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            public int get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsInt() {
                return expression.getFieldValue('{{key}}')
                        .orElseThrow(() -> new ZscriptMissingFieldException("name={{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}, key='{{key}}'"));
            }

            /**
             * Commands: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return the set of commands from this module implemented on the device
             */
            @Nonnull
            public EnumSet<All{{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Commands> get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                return bitsetToEnumSet(get{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsInt(), All{{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Commands.class);
            }

            /**
             * Check command: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param       commands      a command to check
             * @return true if the specified command is implemented; false otherwise
             */
            public boolean isImplementedIn{{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Module(final All{{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Commands commands) {
                return true;
            }

    {{/commandsType}}
{{/typeDefinition}}
