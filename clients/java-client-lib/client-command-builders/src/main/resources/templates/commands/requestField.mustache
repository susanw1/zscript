{{#typeDefinition}}
    {{#enumType}}
    {{! ============ ENUM-TYPE SETTERS ============= }}
            /**
             * Enum of acceptable values for <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field.
             */
            public static enum {{#upperCamel}}{{{fieldName}}}{{/upperCamel}} {
                {{#values}}{{#upperCamel}}{{.}}{{/upperCamel}},{{/values}}
            }

            /**
             * Sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param value  the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, using the supplied numerical value.
             * @return this builder, to facilitate method chaining
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(final int value) {
                checkInEnumRange(value, {{#upperCamel}}{{{fieldName}}}{{/upperCamel}}.class, '{{key}}', false);
                setField((byte) '{{key}}', value);
                return this;
            }

            /**
             * Sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param value  the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, as an enum (never null)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final {{#upperCamel}}{{{fieldName}}}{{/upperCamel}} value) {
                return set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(value.ordinal());
            }

        {{^required}}
            /**
             * Optionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param value  the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, as an OptionalInt (if empty, then no change is made)
             * @return this builder, to facilitate method chaining
            */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final OptionalInt value) {
                return value.isPresent() ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(value.getAsInt()) : this;
            }

            /**
             * Optionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param value  the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, as an Optional enum (if empty, then no change is made)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final Optional<{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}> value) {
                return value.isPresent() ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(value.get()) : this;
            }

            /**
             * Conditionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param condition if true, then set the field; otherwise, no change is made
             * @param value     the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}If(final boolean condition, @Nonnull final {{#upperCamel}}{{{fieldName}}}{{/upperCamel}} value) {
                return condition ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(value) : this;
            }
        {{/required}}
    {{/enumType}}
    {{#uint16Type}}
    {{! ============ UINT16-TYPE SETTERS ============= }}
            /**
             * Sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param value  the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, using the supplied numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(final int value) {
                setField((byte)'{{key}}', value);
            return this;
            }

        {{^required}}
            /**
             * Optionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param value  the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, as an OptionalInt (if empty, then no change is made)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final OptionalInt value) {
                return value.isPresent() ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(value.getAsInt()) : this;
            }

            /**
             * Conditionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param condition if true, then set the field; otherwise, no change is made
             * @param value     the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}If(final boolean condition, final int value) {
                return condition ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(value) : this;
            }
        {{/required}}
    {{/uint16Type}}
    {{#uint32Type}}
    {{! ============ UINT32-TYPE SETTERS ============= }}
            /**
             * Sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param value  the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, using the supplied numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(final long value) {
                setField32((byte)'{{key}}', value);
            return this;
            }

        {{^required}}
            /**
             * Optionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param value  the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, as an OptionalLong (if empty, then no change is made)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final OptionalLong value) {
                return value.isPresent() ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(value.getAsLong()) : this;
            }

            /**
             * Conditionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param condition if true, then set the field; otherwise, no change is made
             * @param value     the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}If(final boolean condition, final long value) {
                return condition ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(value) : this;
            }
        {{/required}}
    {{/uint32Type}}
    {{#flagType}}
                {{! ============ FLAG-TYPE SETTERS ============= }}
            /**
             * Sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() {
                setField((byte)'{{key}}', 0);
            return this;
            }

            /**
             * Sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param condition   if true, then set the field; otherwise, ignore it
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}If(final boolean condition) {
                return condition ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}() : this;
            }

    {{/flagType}}
    {{#bitsetType}}
    {{! ============ BITSET-TYPE SETTERS ============= }}
            /**
             * Enum of acceptable values for <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             */
            public static enum {{#upperCamel}}{{{fieldName}}}{{/upperCamel}} {
            {{#bits}}
                /** {{description}} */
                {{#upperCamel}}{{{bitName}}}{{/upperCamel}},
            {{/bits}}
            }

            /**
             * Sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
            * <p>
             * This sets the field, overwriting any previously set bits.
             *
             * @param bits      the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, using the supplied int value representing the OR'ed bits (overwriting any existing set bits)
             * @return this builder, to facilitate method chaining
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(final int bits) {
                checkInEnumRange(bits, {{#upperCamel}}{{{fieldName}}}{{/upperCamel}}.class, '{{key}}', true);
                setField((byte) '{{key}}', bits);
                return this;
            }

            /**
             * Sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             * <p>
             * This sets the field, overwriting any previously set bits (even if the Set is empty). This method is aimed at facilitating use of EnumSet.of().
             *
             * @param bits      the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, as a Set of enums (never null)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final Set<{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}> bits) {
                int newBits = bits.stream().mapToInt(a -> (1 << a.ordinal())).reduce((a, b) -> a | b).orElse(0);
                return set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(newBits);
            }

            /**
             * Sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
             * <p>
             * This ORs the supplied bit onto the field's existing value - it does NOT overwrite.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param bit    the bit in the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field to set, as a single enum (never null)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final {{#upperCamel}}{{{fieldName}}}{{/upperCamel}} bit) {
                return set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(getFieldOrZero((byte) '{{key}}').getValue() | (1 << bit.ordinal()));
            }

        {{^required}}
            /**
             * Optionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
             * <p>
             * If 'bits' is non-empty, this sets the whole field, overwriting any previously set bits.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param bit   the complete value of the field to set  (if empty, then no change is made)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final OptionalInt bit) {
                return bit.isPresent() ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(bit.getAsInt()) : this;
            }

            /**
             * Optionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
             * <p>
             * If 'bit' is non-empty, then this ORs the supplied bit onto the field's existing value - it does NOT overwrite.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param bit    the bit in the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set, as an Optional enum  (if empty, then no change is made)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final Optional<{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}> bit) {
                return bit.isPresent() ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(bit.get()) : this;
            }

            /**
             * Conditionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> ('{@code {{key}}}') field: {{description}}
             * <p>
             * If 'set' is true, then this ORs the supplied bit onto the field's existing value - it does NOT overwrite.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param condition if true, then set the field; otherwise, no change is made
             * @param bit       the {{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}} to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}If(final boolean condition, @Nonnull final {{#upperCamel}}{{{fieldName}}}{{/upperCamel}} bit) {
                return condition ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(bit) : this;
            }
        {{/required}}
    {{/bitsetType}}
    {{#stringType}}
    {{! ============ STRING-TYPE (BOTH TEXT AND BYTES) SETTERS ============= }}

            /**
             * Uses the supplied bytes for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field: {{description}}
             * <p>
             * This field is defined as 'bytes' and will normally use the hex 1a2b... form. This method overrides that, and uses whichever form uses fewest bytes.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param bytes     the bytes to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsSmallest(@Nonnull final byte[] bytes) {
                setFieldAsSmallest((byte) '{{key}}', ByteString.byteString(bytes));
                return this;
            }

    {{/stringType}}
    {{#textType}}
    {{! ============ TEXT-TYPE SETTERS ============= }}
            /**
             * Uses the supplied text for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field: {{description}}
             * <p>
             * The string is written as UTF-8.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param text      the string value to convert to bytes in UTF-8
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final String text) {
                setFieldAsText((byte) '{{key}}', ByteString.byteStringUtf8(text));
                return this;
            }

            /**
             * Uses the supplied bytes for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field: {{description}}
             * <p>
             * This field is defined as 'text' and will normally use the ""-quoted form. This method overrides that, and uses the hex 1a2b... form.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param bytes     the bytes to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsBytes(@Nonnull final byte[] bytes) {
                setFieldAsBytes((byte) '{{key}}', ByteString.byteString(bytes));
                return this;
            }

        {{^required}}
            /**
             * Uses the supplied bytes, if present, for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field: {{description}}
             * <p>
             * The string is encoded as UTF-8.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param text      the text to set, if present
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final Optional<String> text) {
                return text.isPresent() ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(text.get()) : this;
            }

            /**
             * Conditionally uses the supplied text for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field: {{description}}
             * <p>
             * The string is encoded as UTF-8.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param condition if true, then set the field; otherwise, ignore it
             * @param text      the text to set, if condition is true
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}If(final boolean condition, @Nonnull final String text) {
                return condition ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(text) : this;
            }

        {{/required}}
    {{/textType}}
    {{#bytesType}}
    {{! ============ BYTES-TYPE SETTERS ============= }}
            /**
             * Uses the supplied bytes for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param bytes     the bytes to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final byte[] bytes) {
                setFieldAsBytes((byte) '{{key}}', ByteString.byteString(bytes));
                return this;
            }

            /**
             * Uses the supplied text for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field: {{description}}
             * <p>
             * This field is defined as 'bytes' and will normally use the hex 1a2b... form. This method overrides that, and uses the quoted "..." form.
             * <p>
             * The string is encoded as UTF-8.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param text      the text to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}AsText(@Nonnull final String text) {
                setFieldAsText((byte) '{{key}}', ByteString.byteStringUtf8(text));
                return this;
            }

        {{^required}}
            /**
             * Optionally uses the supplied bytes, if present, for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param bytes      the bytes to set, if present
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(@Nonnull final Optional<byte[]> bytes) {
                return bytes.isPresent() ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(bytes.get()) : this;
            }

            /**
             * Conditionally uses the supplied bytes for the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field: {{description}}
             * <p>
             * The string is encoded as UTF-8.
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param condition  if true, then set the field; otherwise, ignore
             * @param bytes      the bytes to set, if condition is true
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}If(final boolean condition, @Nonnull final byte[] bytes) {
                return condition ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(bytes) : this;
            }
        {{/required}}
    {{/bytesType}}
    {{#anyType}}
    {{! ============ ANY-TYPE SETTERS (Used for "echo" command) ============= }}
            /**
             * Sets any field: {{description}}
            {{#longDescription}}
            * <p>
            * {{longDescription}}
            {{/longDescription}}
             *
             * @param key    the key to set, 'A'-'Z'
             * @param value  the numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(final char key, final int value) {
                setField((byte) key, value);
                return this;
            }
        {{^required}}
            /**
             * Optionally sets any field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param key    the key to set, 'A'-'Z'
             * @param value  the numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(final char key, @Nonnull final OptionalInt value) {
                return value.isPresent() ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(key, value.getAsInt()) : this;
            }

            /**
             * Conditionally sets the <i>{{#lowerCamel}}{{{fieldName}}}{{/lowerCamel}}</i> field: {{description}}
            {{#longDescription}}
             * <p>
             * {{longDescription}}
            {{/longDescription}}
             *
             * @param condition if true, then set the field; otherwise, ignore
             * @param key       the key to set, 'A'-'Z'
             * @param value     the numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}If(final boolean condition, final char key, final int value) {
                return condition ? set{{#upperCamel}}{{{fieldName}}}{{/upperCamel}}(key, value) : this;
            }
        {{/required}}
    {{/anyType}}
{{/typeDefinition}}
