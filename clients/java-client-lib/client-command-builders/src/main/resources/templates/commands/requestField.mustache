{{#typeDefinition}}
    {{#enumType}}
    {{! ============ ENUM-TYPE SETTERS ============= }}
            /**
             * Enum of acceptable values for '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field.
             */
            public static enum {{#upperCamel}}{{name}}{{/upperCamel}} {
                {{#values}}{{#upperCamel}}{{.}}{{/upperCamel}},{{/values}}
            }

            /**
             * Sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, using the supplied numerical value.
             * @return this builder, to facilitate method chaining
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final int value) {
                checkInEnumRange(value, {{#upperCamel}}{{name}}{{/upperCamel}}.class, '{{key}}', false);
                setField((byte) '{{key}}', value);
                return this;
            }

            /**
             * Sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an enum (never null)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final {{#upperCamel}}{{name}}{{/upperCamel}} value) {
                return set{{#upperCamel}}{{name}}{{/upperCamel}}(value.ordinal());
            }

            {{^required}}
            /**
             * Optionally sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an OptionalInt
             * @return this builder, to facilitate method chaining
            */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final OptionalInt value) {
                return value.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value.getAsInt()) : this;
            }

            /**
             * Optionally sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an Optional enum
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final Optional<{{#upperCamel}}{{name}}{{/upperCamel}}> value) {
                return value.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value.get()) : this;
            }

            /**
             * Conditionally sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             *
             * @param set       if true, then set the field; otherwise, ignore it
             * @param value     the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, @Nonnull final {{#upperCamel}}{{name}}{{/upperCamel}} value) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value) : this;
            }
            {{/required}}
                            {{/enumType}}
                            {{#numberType}}
                {{! ============ NUMBER-TYPE SETTERS ============= }}
            /**
             * Sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, using the supplied numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final int value) {
                setField((byte)'{{key}}', value);
            return this;
            }

            {{^required}}
            /**
             * Optionally sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an OptionalInt
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final OptionalInt value) {
                return value.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value.getAsInt()) : this;
            }

            /**
             * Conditionally sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             *
             * @param set       if true, then set the field; otherwise, ignore
             * @param value     the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, final int value) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value) : this;
            }
            {{/required}}
                            {{/numberType}}
                            {{#flagType}}
                {{! ============ FLAG-TYPE SETTERS ============= }}
            /**
             * Sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             *
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}() {
                setField((byte)'{{key}}', 0);
            return this;
            }

            /**
             * Sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             *
             * @param set       if true, then set the field; otherwise, ignore it
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}() : this;
            }

            {{/flagType}}
            {{#bitsetType}}
                {{! ============ BITSET-TYPE SETTERS ============= }}
            /**
             * Enum of acceptable values for '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field.
             */
            public static enum {{#upperCamel}}{{name}}{{/upperCamel}} {
            {{#bits}}
                /** {{description}} */
                {{#upperCamel}}{{name}}{{/upperCamel}},
            {{/bits}}
            }

            /**
             * Sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             * <p/>
             * This sets the field, overwriting any previously set bits.
             *
             * @param bits      the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, using the supplied int value representing the OR'ed bits (overwriting any existing set bits)
             * @return this builder, to facilitate method chaining
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final int bits) {
                checkInEnumRange(bits, {{#upperCamel}}{{name}}{{/upperCamel}}.class, '{{key}}', true);
                setField((byte) '{{key}}', bits);
                return this;
            }

            /**
             * Sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             * <p/>
             * This sets the field, overwriting any previously set bits (even if the Set is empty). This method is aimed at facilitating use of EnumSet.of().
             *
             * @param bits      the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as a Set of enums (never null)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final Set<{{#upperCamel}}{{name}}{{/upperCamel}}> bits) {
                int newBits = bits.stream().mapToInt(a -> (1 << a.ordinal())).reduce((a, b) -> a | b).orElse(0);
                return set{{#upperCamel}}{{name}}{{/upperCamel}}(newBits);
            }

            /**
             * Sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             * <p/>
             * This ORs the supplied bit onto the field's existing value - it does NOT overwrite.
             *
             * @param bit    the bit in the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field to set, as a single enum (never null)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final {{#upperCamel}}{{name}}{{/upperCamel}} bit) {
                return set{{#upperCamel}}{{name}}{{/upperCamel}}(getField((byte) '{{key}}') | (1 << bit.ordinal()));
            }

            {{^required}}
            /**
             * Optionally sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             * <p/>
             * If 'bits' is non-empty, this sets the whole field, overwriting any previously set bits.
             *
             * @param bit   the complete value of the field to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final OptionalInt bit) {
                return bit.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(bit.getAsInt()) : this;
            }

            /**
             * Optionally sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             * <p/>
             * If 'bit' is non-empty, then this ORs the supplied bit onto the field's existing value - it does NOT overwrite.
             *
             * @param value  the bit in the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an Optional enum
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final Optional<{{#upperCamel}}{{name}}{{/upperCamel}}> bit) {
                return bit.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(bit.get()) : this;
            }

            /**
             * Conditionally sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' field: {{description}}
             * <p/>
             * If 'set' is true, then this ORs the supplied bit onto the field's existing value - it does NOT overwrite.
             *
             * @param set       if true, then set the field; otherwise, ignore it
             * @param value     the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, @Nonnull final {{#upperCamel}}{{name}}{{/upperCamel}} value) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value) : this;
            }
            {{/required}}
                        {{/bitsetType}}
                        {{#textType}}
            {{! ============ TEXT-TYPE SETTERS ============= }}
            /**
             * Appends the supplied text for the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' big-field: {{description}}
             * <p/>
             * The string is encoded as UTF-8.
             *
             * @param text      the text to append
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final String text) {
                addBigField(text);
                return this;
            }

            /**
             * Appends the supplied bytes for the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' big-field: {{description}}
             * <p/>
             * This field is defined as 'text' and will normally use the "..." form. This method overrides that, and uses the +1a2b... form.
             *
             * @param text      the bytes to add to the big-field
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}AsBytes(@Nonnull final byte[] bytes) {
                addBigField(bytes);
                return this;
            }

            /**
             * Appends the supplied bytes for the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' big-field: {{description}}
             * <p/>
             * This field is defined as 'text' and will normally use the "..." form. This method overrides that, and uses whichever form uses least bytes.
             *
             * @param text      the bytes to add to the big-field
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}AsSmallest(@Nonnull final byte[] bytes) {
                addBigFieldAsSmallest(bytes);
                return this;
            }

            {{^required}}
            /**
             * Optionally appends the supplied text for the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' big-field: {{description}}
             * <p/>
             * The string is encoded as UTF-8.
             *
             * @param text      the text to append, if present
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final Optional<String> text) {
                return text.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(text.get()) : this;
            }

            /**
             * Conditionally appends the supplied text for the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' big-field: {{description}}
             * <p/>
             * The string is encoded as UTF-8.
             *
             * @param set       if true, then set the field; otherwise, ignore it
             * @param text      the text to append, if present
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, @Nonnull final String text) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(text) : this;
            }

            {{/required}}
        {{/textType}}
        {{#bytesType}}
        {{! ============ BYTES-TYPE SETTERS ============= }}
            /**
             * Appends the supplied bytes for the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' big-field: {{description}}
             *
             * @param bytes     the bytes to add to the big-field
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final byte[] bytes) {
                addBigField(bytes);
                return this;
            }

            /**
             * Appends the supplied text for the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' big-field: {{description}}
             * <p/>
             * This field is defined as 'bytes' and will normally use the +1a2b... form. This method overrides that, and uses the "..." form.
             * <p/>
             * The string is encoded as UTF-8.
             *
             * @param text      the text to append
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}AsText(@Nonnull final String text) {
                addBigField(text);
                return this;
            }

            /**
             * Appends the supplied bytes for the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' big-field: {{description}}
             * <p/>
             * This field is defined as 'bytes' and will normally use the +1a2b... form. This method overrides that, and uses whichever form uses least bytes.
             *
             * @param bytes     the bytes to add to the big-field
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}AsSmallest(@Nonnull final byte[] bytes) {
                addBigFieldAsSmallest(bytes);
                return this;
            }

            {{^required}}
            /**
             * Optionally appends the supplied bytes for the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' big-field: {{description}}
             *
             * @param bytes      the bytes to append, if present
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(@Nonnull final Optional< byte[]> bytes) {
                return bytes.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(bytes.get()) : this;
            }

            /**
             * Conditionally appends the supplied bytes for the '{{#lowerCamel}}{{name}}{{/lowerCamel}}' big-field: {{description}}
             * <p/>
             * The string is encoded as UTF-8.
             *
             * @param set       if true, then set the field; otherwise, ignore it
             * @param bytes     the bytes to append, if present
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, @Nonnull final byte[] bytes) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(bytes) : this;
            }
            {{/required}}
        {{/bytesType}}
        {{#anyType}}
        {{! ============ ANY-TYPE SETTERS (Used for "echo" command) ============= }}
            /**
             * Sets any field: {{description}}
             *
             * @param key    the key to set, 'A'-'Z'
             * @param value  the numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final char key, final int value) {
                setField((byte) key, value);
                return this;
            }
            {{^required}}
            /**
             * Optionally sets any field: {{description}}
             *
             * @param key    the key to set, 'A'-'Z'
             * @param value  the numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final char key, @Nonnull final OptionalInt value) {
                return value.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(key, value.getAsInt()) : this;
            }

            /**
             * Conditionally sets the '{{#lowerCamel}}{{name}}{{/lowerCamel}} field: {{description}}
             *
             * @param set    if true, then set the field; otherwise, ignore
             * @param key    the key to set, 'A'-'Z'
             * @param value  the numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, final char key, final int value) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(key, value) : this;
            }
        {{/required}}
    {{/anyType}}
{{/typeDefinition}}
