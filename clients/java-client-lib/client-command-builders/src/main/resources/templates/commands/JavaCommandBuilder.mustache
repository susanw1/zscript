package {{additional.package-elements}};

import java.nio.charset.*;
import java.util.*;
import java.util.stream.*;

import javax.annotation.processing.Generated;

import static net.zscript.javaclient.commandbuilder.Utils.*;

import net.zscript.javaclient.commandbuilder.*;
import net.zscript.javareceiver.tokenizer.*;
import net.zscript.model.components.*;

/**
 * {{name}} Module: {{description}}.
 *
 * @version {{version}}
 */
@Generated(value = "JavaCommandBuilder.mustache",
           date = "{{timeNow}}",
           comments = "Zscript Java fluent Command/Response builder generator, using {{additional.context-source}}")
public class {{#upperCamel}}{{moduleName}}{{/upperCamel}}Module {
    public static final int    MODULE_ID = {{id}};
    public static final String MODULE_NAME = "{{name}}";
    public static final String VERSION = "{{version}}";
    public static final String DESCRIPTION = "{{description}}";

    private {{#upperCamel}}{{moduleName}}{{/upperCamel}}Module() {
        // prevent instantiation
    }

    /**
     * Defines the set of all commands defined in this module.
     */
    public static enum {{#upperCamel}}{{moduleName}}{{/upperCamel}}Commands {
{{#commands}}
        /** {{description}} */
        {{#upperCamel}}{{commandName}}{{/upperCamel}}({{command}}),
{{/commands}}
        ;

        private final byte command;

        private {{#upperCamel}}{{moduleName}}{{/upperCamel}}Commands(int command) {
            this.command = (byte) command;
        }

        public byte getCommand() {
            return command;
        }
    }

{{#commands}}
    /**
     * Creates a builder for the '{{name}}' command: {{description}}
     */
    public static {{#upperCamel}}{{name}}Command{{/upperCamel}}.Builder {{#lowerCamel}}{{name}}{{/lowerCamel}}Builder() {
        return {{#upperCamel}}{{name}}Command{{/upperCamel}}.builder();
    }

{{/commands}}
{{#commands}}

    public static class {{#upperCamel}}{{commandName}}Command{{/upperCamel}}
            extends ZscriptBuiltCommandNode<{{#upperCamel}}{{commandName}}Command{{/upperCamel}}.{{#upperCamel}}{{name}}{{/upperCamel}}CommandResponse> {
        public static final byte CMD_ID = {{command}};

        public {{#upperCamel}}{{commandName}}Command{{/upperCamel}}(Builder builder) {
            super(builder);
        }

        public static Builder builder() {
            return new Builder();
        }


        @Override
        protected boolean canFail() {
            return {{#status}}true|{{/status}}{{^status}}false|{{/status}}false;
        }

        @Override
        protected {{#upperCamel}}{{name}}CommandResponse{{/upperCamel}} parseResponse(ZscriptExpression resp) {
            return new {{#upperCamel}}{{name}}CommandResponse{{/upperCamel}}(resp);
        }

        /**
         * {{description}}
         * <p>
         * Command semantics characterized as: {{operation}}.
         */
        public static class Builder extends ZscriptCommandBuilder<{{#upperCamel}}{{name}}{{/upperCamel}}CommandResponse> {

            private Builder() {
                setRequiredFields(new byte[] { {{#requestFields}}{{#required}}(byte) '{{key}}', {{/required}}{{/requestFields}} });
                setField(Zchars.Z_CMD, {{fullCommand}});
            }

            @Override
            public {{#upperCamel}}{{commandName}}Command{{/upperCamel}} build() {
                failIfInvalid();
                return new {{#upperCamel}}{{commandName}}Command{{/upperCamel}}(this);
            }


        // +++++++++++++ REQUEST FIELDS +++++++++++++
        {{#requestFields}}
            {{#typeDefinition}}
                {{#enumType}}
    {{! ============ ENUM-TYPE SETTERS ============= }}
            /**
             * Enum of acceptable values for {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field.
             */
            public static enum {{#upperCamel}}{{name}}{{/upperCamel}} {
                {{#values}}
                {{#upperCamel}}{{.}}{{/upperCamel}},
                {{/values}}
            }

            /**
             * Sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, using the supplied numerical value.
             * @return this builder, to facilitate method chaining
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final int value) {
                checkInEnumRange(value, {{#upperCamel}}{{name}}{{/upperCamel}}.class, '{{key}}', false);
                setField((byte) '{{key}}', value);
                return this;
            }

            /**
             * Sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an enum (never null)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final {{#upperCamel}}{{name}}{{/upperCamel}} value) {
                return set{{#upperCamel}}{{name}}{{/upperCamel}}(value.ordinal());
            }

                    {{^required}}
            /**
             * Optionally sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an OptionalInt
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final OptionalInt value) {
                return value.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value.getAsInt()) : this;
            }

            /**
             * Optionally sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an Optional enum
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final Optional<{{#upperCamel}}{{name}}{{/upperCamel}}> value) {
                return value.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value.get()) : this;
            }

            /**
             * Conditionally sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @param set       if true, then set the field; otherwise, ignore it
             * @param value     the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, final {{#upperCamel}}{{name}}{{/upperCamel}} value) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value) : this;
            }
                    {{/required}}
                {{/enumType}}
                {{#numberType}}
    {{! ============ NUMBER-TYPE SETTERS ============= }}
            /**
             * Sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, using the supplied numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final int value) {
                setField((byte)'{{key}}', value);
                return this;
            }

                    {{^required}}
            /**
             * Optionally sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @param value  the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an OptionalInt
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final OptionalInt value) {
                return value.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value.getAsInt()) : this;
            }

            /**
             * Conditionally sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @param set       if true, then set the field; otherwise, ignore
             * @param value     the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, final int value) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value) : this;
            }
                    {{/required}}
                {{/numberType}}
                {{#flagType}}
    {{! ============ FLAG-TYPE SETTERS ============= }}
            /**
             * Sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}() {
                setField((byte)'{{key}}', 0);
                return this;
            }

            /**
             * Sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @param set       if true, then set the field; otherwise, ignore it
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}() : this;
            }

                {{/flagType}}
                {{#bitsetType}}
    {{! ============ BITSET-TYPE SETTERS ============= }}
            /**
             * Enum of acceptable values for {@link #{{name}} } field.
             */
            public static enum {{#upperCamel}}{{name}}{{/upperCamel}} {
                {{#bits}}
                /** {{description}} */
                {{#upperCamel}}{{name}}{{/upperCamel}},
                {{/bits}}
            }

            /**
             * Sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             * <p>
             * This sets the field, overwriting any previously set bits.
             *
             * @param bits      the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, using the supplied int value representing the OR'ed bits (overwriting any existing set bits)
             * @return this builder, to facilitate method chaining
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final int bits) {
                checkInEnumRange(bits, {{#upperCamel}}{{name}}{{/upperCamel}}.class, '{{key}}', true);
                setField((byte) '{{key}}', bits);
                return this;
            }

            /**
             * Sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             * <p>
             * This sets the field, overwriting any previously set bits (even if the Set is empty). This method is aimed at facilitating use of EnumSet.of().
             *
             * @param bits      the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as a Set of enums (never null)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final Set<{{#upperCamel}}{{name}}{{/upperCamel}}> bits) {
                int newBits = bits.stream().mapToInt(a -> (1 << a.ordinal())).reduce((a, b) -> a | b).orElse(0);
                return set{{#upperCamel}}{{name}}{{/upperCamel}}(newBits);
            }

            /**
             * Sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             * <p>
             * This ORs the supplied bit onto the field's existing value - it does NOT overwrite.
             *
             * @param bit    the bit in the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field to set, as a single enum (never null)
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final {{#upperCamel}}{{name}}{{/upperCamel}} bit) {
                return set{{#upperCamel}}{{name}}{{/upperCamel}}(getField((byte) '{{key}}') | (1 << bit.ordinal()));
            }

                    {{^required}}
            /**
             * Optionally sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             * <p>
             * If 'bits' is non-empty, this sets the whole field, overwriting any previously set bits.
             *
             * @param bit   the complete value of the field to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final OptionalInt bit) {
                return bit.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(bit.getAsInt()) : this;
            }

            /**
             * Optionally sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             * <p>
             * If 'bit' is non-empty, then this ORs the supplied bit onto the field's existing value - it does NOT overwrite.
             *
             * @param value  the bit in the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set, as an Optional enum
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final Optional<{{#upperCamel}}{{name}}{{/upperCamel}}> bit) {
                return bit.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(bit.get()) : this;
            }

            /**
             * Conditionally sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             * <p>
             * If 'set' is true, then this ORs the supplied bit onto the field's existing value - it does NOT overwrite.
             *
             * @param set       if true, then set the field; otherwise, ignore it
             * @param value     the {{#lowerCamel}}{{name}}{{/lowerCamel}} to set
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, final {{#upperCamel}}{{name}}{{/upperCamel}} value) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(value) : this;
            }
                    {{/required}}
                {{/bitsetType}}
                {{#textType}}
    {{! ============ TEXT-TYPE SETTERS ============= }}
            /**
             * Appends the supplied text for the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } big-field: {{description}}
             * <p>
             * The string is encoded as UTF-8.
             *
             * @param text      the text to append
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final String text) {
                addBigField(text);
                return this;
            }

            /**
             * Appends the supplied bytes for the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } big-field: {{description}}
             * <p>
             * This field is defined as 'text' and will normally use the "..." form. This method overrides that, and uses the +1a2b... form.
             *
             * @param text      the bytes to add to the big-field
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}AsBytes(final byte[] bytes) {
                addBigField(bytes);
                return this;
            }

            /**
             * Appends the supplied bytes for the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } big-field: {{description}}
             * <p>
             * This field is defined as 'text' and will normally use the "..." form. This method overrides that, and uses whichever form uses least bytes.
             *
             * @param text      the bytes to add to the big-field
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}AsSmallest(final byte[] bytes) {
                addBigFieldAsSmallest(bytes);
                return this;
            }

                    {{^required}}
            /**
             * Optionally appends the supplied text for the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } big-field: {{description}}
             * <p>
             * The string is encoded as UTF-8.
             *
             * @param text      the text to append, if present
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final Optional<String> text) {
                return text.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(text.get()) : this;
            }

            /**
             * Conditionally appends the supplied text for the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } big-field: {{description}}
             * <p>
             * The string is encoded as UTF-8.
             *
             * @param set       if true, then set the field; otherwise, ignore it
             * @param text      the text to append, if present
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, final String text) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(text) : this;
            }

                    {{/required}}
                {{/textType}}
                {{#bytesType}}
    {{! ============ BYTES-TYPE SETTERS ============= }}
            /**
             * Appends the supplied bytes for the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } big-field: {{description}}
             *
             * @param bytes     the bytes to add to the big-field
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final byte[] bytes) {
                addBigField(bytes);
                return this;
            }

            /**
             * Appends the supplied text for the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } big-field: {{description}}
             * <p>
             * This field is defined as 'bytes' and will normally use the +1a2b... form. This method overrides that, and uses the "..." form.
             * <p>
             * The string is encoded as UTF-8.
             *
             * @param text      the text to append
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}AsText(final String text) {
                addBigField(text);
                return this;
            }

            /**
             * Appends the supplied bytes for the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } big-field: {{description}}
             * <p>
             * This field is defined as 'bytes' and will normally use the +1a2b... form. This method overrides that, and uses whichever form uses least bytes.
             *
             * @param bytes     the bytes to add to the big-field
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}AsSmallest(final byte[] bytes) {
                addBigFieldAsSmallest(bytes);
                return this;
            }

                    {{^required}}
            /**
             * Optionally appends the supplied bytes for the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } big-field: {{description}}
             *
             * @param bytes      the bytes to append, if present
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final Optional< byte[]> bytes) {
                return bytes.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(bytes.get()) : this;
            }

            /**
             * Conditionally appends the supplied bytes for the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } big-field: {{description}}
             * <p>
             * The string is encoded as UTF-8.
             *
             * @param set       if true, then set the field; otherwise, ignore it
             * @param bytes     the bytes to append, if present
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, final byte[] bytes) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(bytes) : this;
            }
                    {{/required}}
                {{/bytesType}}
                {{#anyType}}
    {{! ============ ANY-TYPE SETTERS ============= }}
            /**
             * Sets any field: {{description}}
             *
             * @param key    the key to set, 'A'-'Z'
             * @param value  the numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final char key, final int value) {
                setField((byte) key, value);
                return this;
            }
                    {{^required}}
            /**
             * Optionally sets any field: {{description}}
             *
             * @param key    the key to set, 'A'-'Z'
             * @param value  the numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final char key, final OptionalInt value) {
                return value.isPresent() ? set{{#upperCamel}}{{name}}{{/upperCamel}}(key, value.getAsInt()) : this;
            }

            /**
             * Conditionally sets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @param set    if true, then set the field; otherwise, ignore
             * @param key    the key to set, 'A'-'Z'
             * @param value  the numerical value
             * @return this builder, to facilitate method chaining
             */
            public Builder set{{#upperCamel}}{{name}}{{/upperCamel}}(final boolean set, final char key, final int value) {
                return set ? set{{#upperCamel}}{{name}}{{/upperCamel}}(key, value) : this;
            }
                    {{/required}}
                {{/anyType}}
            {{/typeDefinition}}
        {{/requestFields}}
        }

    // +++++++++++++ RESPONSE FIELDS +++++++++++++

        public static class {{#upperCamel}}{{name}}CommandResponse{{/upperCamel}} extends ValidatingResponse {
            public {{#upperCamel}}{{name}}CommandResponse{{/upperCamel}}(ZscriptExpression response) {
                super(response, new byte[] { {{#responseFields}}{{#required}}(byte) '{{key}}', {{/required}}{{/responseFields}} });
            }
        {{#responseFields}}
            {{#typeDefinition}}
                {{#enumType}}
    {{! ============ ENUM GETTERS ============= }}
            /**
             * Enum of acceptable values for {@link #{{name}} } field.
             */
            public static enum {{#upperCamel}}{{name}}{{/upperCamel}} {
                {{#values}}
                {{#upperCamel}}{{.}}{{/upperCamel}},
                {{/values}}
            }

                    {{#required}}
            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this required field
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            public int get{{#upperCamel}}{{name}}{{/upperCamel}}AsInt() {
                int value = expression.getField((byte) '{{key}}')
                        .orElseThrow(() -> new ZscriptMissingFieldException("name={{#lowerCamel}}{{name}}{{/lowerCamel}}, key='{{key}}'"));
                return checkInEnumRange(value, {{#upperCamel}}{{name}}{{/upperCamel}}.class, '{{key}}', false);
            }

            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this required field
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            public {{#upperCamel}}{{name}}{{/upperCamel}} get{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return {{#upperCamel}}{{name}}{{/upperCamel}}.values()[get{{#upperCamel}}{{name}}{{/upperCamel}}AsInt()];
            }
                    {{/required}}
                    {{^required}}
            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this non-required field
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            public OptionalInt get{{#upperCamel}}{{name}}{{/upperCamel}}AsInt() {
                final OptionalInt field = expression.getField((byte) '{{key}}');
                if (field.isPresent()) {
                    checkInEnumRange(field.getAsInt(), {{#upperCamel}}{{name}}{{/upperCamel}}.class, '{{key}}', false);
                }
                return field;
            }

            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this non-required field as enum
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available values
             */
            public Optional<{{#upperCamel}}{{name}}{{/upperCamel}}> get{{#upperCamel}}{{name}}{{/upperCamel}}() {
                OptionalInt valueOpt = get{{#upperCamel}}{{name}}{{/upperCamel}}AsInt();
                return valueOpt.stream().mapToObj(v -> {{#upperCamel}}{{name}}{{/upperCamel}}.values()[v]).findFirst();
            }

            /**
             * Determines if the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field is set: {{description}}
             *
             * @return true if this field is set, false otherwise
             */
            public boolean has{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return expression.hasField((byte) '{{key}}');
            }
                    {{/required}}
                {{/enumType}}
                {{#numberType}}
    {{! ============ NUMBER-TYPE GETTERS ============= }}
                    {{#required}}
            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this required field
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            public int get{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return expression.getField((byte) '{{key}}')
                        .orElseThrow(() -> new ZscriptMissingFieldException("name={{#lowerCamel}}{{name}}{{/lowerCamel}}, key='{{key}}'"));
            }
                    {{/required}}
                    {{^required}}
            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this non-required field, or empty if not set
             */
            public OptionalInt get{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return expression.getField((byte) '{{key}}');
            }

            /**
             * Determines if the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field is set: {{description}}
             *
             * @return true if this field is set, false otherwise
             */
            public boolean has{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return expression.hasField((byte) '{{key}}');
            }
                    {{/required}}
                {{/numberType}}
                {{#flagType}}
    {{! ============ FLAG-TYPE GETTERS ============= }}
            /**
             * Checks if the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field is set: {{description}}
             *
             * @return true if this field is set, false otherwise
             */
            public boolean is{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return expression.hasField((byte) '{{key}}');
            }
                {{/flagType}}
                {{#bitsetType}}
    {{! ============ BITSET-TYPE GETTERS ============= }}
            /**
             * Enum of acceptable values for {@link #{{name}} } field.
             */
            public static enum {{#upperCamel}}{{name}}{{/upperCamel}} {
                {{#bits}}
                /** {{description}} */
                {{#upperCamel}}{{name}}{{/upperCamel}},
                {{/bits}}
            }

                    {{#required}}
            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this required field as a int, with bits OR'ed together
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available bit values
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            public int get{{#upperCamel}}{{name}}{{/upperCamel}}AsInt() {
                final int value = expression.getField((byte) '{{key}}')
                        .orElseThrow(() -> new ZscriptMissingFieldException("name={{#lowerCamel}}{{name}}{{/lowerCamel}}, key='{{key}}'"));
                return checkInEnumRange(value, {{#upperCamel}}{{name}}{{/upperCamel}}.class, '{{key}}', true);
            }

            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this required field, with the bits represented as an EnumSet
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available bit values
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            public EnumSet<{{#upperCamel}}{{name}}{{/upperCamel}}> get{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return bitsetToEnumSet(get{{#upperCamel}}{{name}}{{/upperCamel}}AsInt(), {{#upperCamel}}{{name}}{{/upperCamel}}.class);
            }
                    {{/required}}
                    {{^required}}
            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this non-required field, or empty if not set
             */
            public OptionalInt get{{#upperCamel}}{{name}}{{/upperCamel}}AsInt() {
                return expression.getField((byte) '{{key}}');
            }

            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this required field, with the bits represented as an EnumSet; if field is missing, the EnumSet is empty.
             * @throws ZscriptFieldOutOfRangeException if the value is out of range of the available bit values
             */
            public EnumSet<{{#upperCamel}}{{name}}{{/upperCamel}}> get{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return bitsetToEnumSet(get{{#upperCamel}}{{name}}{{/upperCamel}}AsInt().orElse(0), {{#upperCamel}}{{name}}{{/upperCamel}}.class);
            }

            /**
             * Determines if the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field is set: {{description}}
             *
             * @return true if this field is set, false otherwise
             */
            public boolean has{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return expression.hasField((byte) '{{key}}');
            }
                    {{/required}}
                {{/bitsetType}}
                {{#bigfieldType}}
    {{! ============ BIG-FIELD-TYPE GETTERS ============= }}
            /**
             * Returns the big-field data as bytes: {{description}}
             *
             * @return the big-field data, as bytes
             */
            public byte[] get{{#upperCamel}}{{name}}{{/upperCamel}}AsBytes() {
                return expression.getBigFieldData();
            }

            /**
             * Returns the big-field data as a String: {{description}}
             * <p>
             * The bytes are interpreted as encoded as UTF-8.
             *
             * @return the big-field data, as a String
             */
            public String get{{#upperCamel}}{{name}}{{/upperCamel}}AsString() {
                return new String(expression.getBigFieldData(), StandardCharsets.UTF_8);
            }

                    {{^required}}
            /**
             * Determines whether a big-field was supplied in the response: {{description}}
             *
             * @return true if any big-field component was supplied, false otherwise
             */
            public boolean has{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return expression.hasBigField();
            }
                    {{/required}}
                {{/bigfieldType}}
                {{#textType}}
    {{! ============ TEXT-TYPE GETTERS ============= }}
            /**
             * Returns the big-field data as text: {{description}}
             * <p>
             * The bytes are interpreted as encoded as UTF-8.
             *
             * @return the big-field data, as a String
             */
            public String get{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return get{{#upperCamel}}{{name}}{{/upperCamel}}AsString();
            }
                {{/textType}}
                {{#bytesType}}
    {{! ============ BYTES-TYPE GETTERS ============= }}
            /**
             * Returns the big-field data as bytes: {{description}}
             *
             * @return the big-field data, as bytes
             */
            public byte[] get{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return get{{#upperCamel}}{{name}}{{/upperCamel}}AsBytes();
            }
                {{/bytesType}}
                {{#commandsType}}
    {{! ============ COMMANDS-TYPE GETTERS ============= }}
            /**
             * Gets the {@code {{#lowerCamel}}{{name}}{{/lowerCamel}} } field: {{description}}
             *
             * @return the value of this required field
             * @throws ZscriptMissingFieldException if this required field is not set in the response, see {@link #isValid()}
             */
            public int get{{#upperCamel}}{{name}}{{/upperCamel}}AsInt() {
                return expression.getField((byte) '{{key}}')
                        .orElseThrow(() -> new ZscriptMissingFieldException("name={{#lowerCamel}}{{name}}{{/lowerCamel}}, key='{{key}}'"));
            }

            /**
             * Commands: {{description}}
             *
             * @return the set of implemented commands in this module
             */
            public EnumSet<{{#upperCamel}}{{moduleName}}{{/upperCamel}}Commands> get{{#upperCamel}}{{name}}{{/upperCamel}}() {
                return bitsetToEnumSet(get{{#upperCamel}}{{name}}{{/upperCamel}}AsInt(), {{#upperCamel}}{{moduleName}}{{/upperCamel}}Commands.class);
            }

            /**
             * Commands: {{description}}
             *
             * @return the set of implemented commands in this module
             */
            public boolean isImplementedIn{{#upperCamel}}{{moduleName}}{{/upperCamel}}(final {{#upperCamel}}{{moduleName}}{{/upperCamel}}Commands command) {
                return true;
            }

                {{/commandsType}}
            {{/typeDefinition}}
        {{/responseFields}}

        }
    }

    {{/commands}}
}
