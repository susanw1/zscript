package {{additional.package-elements}};

import java.nio.charset.*;
import java.util.*;
import java.util.stream.*;

import javax.annotation.*;
import javax.annotation.processing.Generated;

import static net.zscript.javaclient.commandbuilder.Utils.*;

import net.zscript.javaclient.commandPaths.*;
import net.zscript.javaclient.commandbuilder.commandnodes.*;
import net.zscript.javaclient.commandbuilder.commandnodes.*;
import net.zscript.javaclient.commandbuilder.defaultCommands.*;
import net.zscript.javaclient.commandbuilder.*;
import net.zscript.javaclient.commandbuilder.commandnodes.*;
import net.zscript.javaclient.commandbuilder.notifications.*;
import net.zscript.model.datamodel.*;
import net.zscript.tokenizer.*;
import net.zscript.model.components.*;

/**
 * {{#upperCamel}}{{{moduleName}}}{{/upperCamel}} Module: {{description}}.
{{#longDescription}}
 * <p>
 * {{longDescription}}
{{/longDescription}}
 *
 * @version {{version}}
 */
@Generated(value = "JavaCommandBuilder.mustache",
           date = "{{timeNow}}",
           comments = "Zscript Java fluent Command/Response builder generator, using {{additional.context-source}}")
public final class {{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Module {
    public static final int    MODULE_ID = {{id}};
    public static final String MODULE_NAME = "{{{moduleName}}}";
    public static final String VERSION = "{{version}}";
    public static final String DESCRIPTION = "{{description}}";

    private {{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Module() {
        // prevent instantiation
    }

    {{! ============ COMMAND SUMMARY ENUM ============= }}
    /**
     * Defines constants for the commands defined in the '{{#upperCamel}}{{{moduleName}}}{{/upperCamel}}' module. Each command has a CMD field referencing its constant.
     */
    public static enum {{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Commands {
{{#commands}}
        /** {{description}} ({@link {{#upperCamel}}{{{commandName}}}{{/upperCamel}}Command#CMD}) */
        {{#upperCamel}}{{{commandName}}}{{/upperCamel}}({{command}}),
{{/commands}}
        ;

        private final byte command;

        private {{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Commands(int command) {
            if ((command & ~0xf) != 0) {
                throw new ZscriptModelException("Invalid command number: " + command);
            }
            this.command = (byte) command;
        }

        /**
         * Returns the 4-bit command id code (associated with the 'Z' command field).
         *
         * @return command id (0x0-0xf)
         */
        public byte getCommand() {
            return command;
        }
    }

    {{! ============ NOTIFICATION SUMMARY ENUM ============= }}

    /**
     * Defines the set of all notifications defined in the '{{#upperCamel}}{{{moduleName}}}{{/upperCamel}}' module.
     */
    public static enum {{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Notifications {
{{#notifications}}
        /** {{description}} ({@link {{#upperCamel}}{{{notificationName}}}{{/upperCamel}}NotificationId#NTFN}) */
        {{#upperCamel}}{{{notificationName}}}{{/upperCamel}}({{notification}}),
{{/notifications}}
        ;

        private final byte notification;

        private {{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Notifications(int notification) {
            if ((notification & ~0xf) != 0) {
                throw new ZscriptModelException("Invalid notification number: " + notification);
            }
            this.notification = (byte) notification;
        }

        /**
         * Returns the 4-bit notification id code (associated with the '!' response sequence field).
         *
         * @return notification id (0x0-0xf)
         */
        public byte getNotification() {
            return notification;
        }
    }

{{! ============ COMMAND PROCESSING ============= }}


{{#commands}}
    /**
     * Creates a builder for the '{{#upperCamel}}{{{commandName}}}{{/upperCamel}}' command: {{description}}
     */
    public static {{#upperCamel}}{{{commandName}}}{{/upperCamel}}Command.Builder {{#lowerCamel}}{{{commandName}}}{{/lowerCamel}}Builder() {
        return {{#upperCamel}}{{{commandName}}}{{/upperCamel}}Command.builder();
    }

{{/commands}}
{{#commands}}
    /**
    * Defines the '{{#upperCamel}}{{{commandName}}}{{/upperCamel}}' command: {{description}}.
    {{#longDescription}}
    * <p>
    * {{longDescription}}
    {{/longDescription}}
    */
    public static final class {{#upperCamel}}{{{commandName}}}{{/upperCamel}}Command
            extends ZscriptCommandNode<{{#upperCamel}}{{{commandName}}}{{/upperCamel}}Command.{{#upperCamel}}{{{commandName}}}{{/upperCamel}}Response> {
        public static final {{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Commands CMD = {{#upperCamel}}{{{moduleName}}}{{/upperCamel}}Commands.{{#upperCamel}}{{{commandName}}}{{/upperCamel}};

        private {{#upperCamel}}{{{commandName}}}Command{{/upperCamel}}(Builder builder) {
            super(builder);
        }

        /** Constructs the command object. */
        @Nonnull
        public static Builder builder() {
            return new Builder();
        }

        /** Identifies the type of the response associated with this command. */
        @Nonnull
        @Override
        public Class<{{#upperCamel}}{{{commandName}}}{{/upperCamel}}Response> getResponseType() {
            return {{#upperCamel}}{{{commandName}}}{{/upperCamel}}Response.class;
        }

        @Override
        protected boolean canFail() {
            return {{#status}}true|{{/status}}{{^status}}false|{{/status}}false;
        }

        /** Constructs the correct response object to this type of command, representing the supplied Zscript response expression. */
        @Nonnull
        @Override
        public {{#upperCamel}}{{{commandName}}}{{/upperCamel}}Response parseResponse(@Nonnull ZscriptExpression resp) {
            return new {{#upperCamel}}{{{commandName}}}{{/upperCamel}}Response(resp);
        }

        /**
         * Builder for setting fields for: {{description}}
         * <p>
         * Command semantics characterized as: {{operation}}.
         */
        public static final class Builder extends ZscriptCommandBuilder<{{#upperCamel}}{{{commandName}}}{{/upperCamel}}Response> {

            private Builder() {
                setRequiredFields(new byte[] { {{#requestFields}}{{#required}}(byte) '{{key}}', {{/required}}{{/requestFields}} });
                setField(Zchars.Z_CMD, {{fullCommand}});
            }

            @Nonnull
            @Override
            public {{#upperCamel}}{{{commandName}}}Command{{/upperCamel}} build() {
                failIfInvalid();
                return new {{#upperCamel}}{{{commandName}}}Command{{/upperCamel}}(this);
            }


            // +++++++++++++ REQUEST FIELDS +++++++++++++
        {{#requestFields}}
            {{>requestField.mustache}}
        {{/requestFields}}
        }

        /**
         * Defines the response to a '{{#upperCamel}}{{{commandName}}}{{/upperCamel}}' command: {{description}}
         */
        public static final class {{#upperCamel}}{{{commandName}}}{{/upperCamel}}Response extends ValidatingResponse {
            public {{#upperCamel}}{{{commandName}}}{{/upperCamel}}Response(ZscriptExpression response) {
                super(response, new byte[] { {{#responseFields}}{{#required}}(byte) '{{key}}', {{/required}}{{/responseFields}} });
            }

            // +++++++++++++ RESPONSE FIELDS +++++++++++++
        {{#responseFields}}
            {{>responseField.mustache}}
        {{/responseFields}}
        }
    }

    {{/commands}}

    {{! ============ NOTIFICATION PROCESSING ============= }}

    // +++++++++++++ NOTIFICATIONS +++++++++++++

    {{>notifications.mustache}}
}
