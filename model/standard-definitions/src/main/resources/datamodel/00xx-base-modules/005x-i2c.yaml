modules:
-   name: I2C
    id: 5
    version: 0.0.1
    description: I2C Connectivity

    commands:
    -   name: capabilities
        command: 0
        description: I2C capabilities
        operation: get
        requestFields: []
        responseFields:
        -   key: C
            name: commandsSet
            description: which commands are enabled in the I2C module
            typeDefinition:
                '@type': commands
                bitFields: []
            required: yes
        -   key: N
            name: notificationsSupported
            description: whether notifications are supported for SMBus alerts or similar
            typeDefinition:
                '@type': flag
            required: no
        -   key: A
            name: addressingSupported
            description: whether addressing via the I2C port is available
            typeDefinition:
                '@type': flag
            required: no
        -   key: P
            name: portCount
            description: how many ports are available
            typeDefinition:
                '@type': number
            required: yes
        -   key: F
            name: frequenciesSupported
            description: how many frequencies are supported as a 'menu' of (0 -> slow, 1 -> 100kHz, 2 -> 400kHz, 3 -> 1MHz)
            typeDefinition:
                '@type': number
            required: yes
        -   key: M
            name: maximumSupportedFrequency
            description: if present, arbitrary frequency selection is supported, and this is the highest supported (in units of kHz, giving a limit of 64MHz)
            typeDefinition:
                '@type': number
            required: no
        -   key: B
            name: bitsetCapabilities
            description: a set of more specific capabilities of the module
            typeDefinition:
                '@type': bitset
                bitFields:
#                - name: lowSpeedSupported
#                  description: whether the device supports a frequency in the range 1kHz-10kHz, as a noise resistant mode
#                - name: busFree
#                  description: whether the device supports freeing from a bus lockup (due to a missed SCL pulse)
#                - name: smBusAddressResolution
#                  description: whether the device supports resolving I2C addresses associated with alerts
            required: yes
        status: []

    -   name: i2cSetup
        command: 1
        description: configures the I2C subsystem
        operation: put
        requestFields:
        -   key: P
            name: port
            description: 'which port to configure (default: all)'
            typeDefinition:
                '@type': number
            required: no
        -   key: F
            name: frequency
            description: the frequency to set as a choice from the 'menu'
            typeDefinition:
                '@type': number
            required: no
        -   key: K
            name: frequencykHz
            description: the frequency to set in kHz (the device will choose a frequency <= this)
            typeDefinition:
                '@type': number
            required: no
        -   key: A
            name: addressing
            description: enables addressing
            typeDefinition:
                '@type': flag
            required: no
        -   key: N
            name: notifications
            description: enables notifications
            typeDefinition:
                '@type': flag
            required: no
        -   key: R
            name: resolveSMBus
            description: whether the I2C system should resolve addresses when sending notifications for SMBus alerts.
            typeDefinition:
                '@type': flag
            required: no
        responseFields:
        -   key: K
            name: frequencykHz
            description: the frequency the device will run at in kHz
            typeDefinition:
                '@type': number
            required: no
        status:
        -   code: BAD_PARAM
            meaning: port or frequency out of range

    -   name: i2cSend
        command: 2
        description: Sends data to a specified I2C device
        operation: post
        requestFields:
        -   key: P
            name: port
            description: which port to send to
            typeDefinition:
                '@type': number
            required: yes
        -   key: A
            name: address
            description: which address to send to (0-127, or 0-1023 depending on mode)
            typeDefinition:
                '@type': number
            required: yes
        -   key: N
            name: tenBitMode
            description: 'indicates if 10-bit addressing (default: 7 bit)'
            typeDefinition:
                '@type': flag
            required: no
        -   key: T
            name: retries
            description: 'how many times to try the write operation (default: 5)'
            typeDefinition:
                '@type': number
            required: no
        -   key: +
            name: data
            description: the data to send
            typeDefinition:
                '@type': bytes
            required: no
        responseFields:
        -   key: I
            name: resultInfo
            description: detailed status info for I2C activity
            typeDefinition:
                '@type': enum
                allowedValues: [Ok, BufferOverrun, AddrNack, DataNack, Other ]
            required: yes
        -   key: T
            name: attempts
            description: how many attempts we made to send
            typeDefinition:
                '@type': number
            required: yes
        status:
        -   code: CMD_FAIL
            meaning: write failed in benign way
        -   code: CMD_ERROR
            meaning: write failed in bad way - serious error
            

    -   name: i2cReceive
        command: 3
        description: Receives data from a specified I2C device
        operation: post
        requestFields:
        -   key: P
            name: port
            description: which port to read from
            typeDefinition:
                '@type': number
            required: yes
        -   key: A
            name: address
            description: which address to read from (0-127, or 0-1023 depending on mode)
            typeDefinition:
                '@type': number
            required: yes
        -   key: N
            name: tenBitMode
            description: 'indicates if 10-bit addressing (default: 7 bit)'
            typeDefinition:
                '@type': flag
            required: no
        -   key: T
            name: retries
            description: 'how many times to try the receive operation (default: 5)'
            typeDefinition:
                '@type': number
            required: no
        -   key: L
            name: length
            description: 'number of bytes to attempt to receive (default: 0)'
            typeDefinition:
                '@type': number
            required: no
        responseFields:
        -   key: I
            name: resultInfo
            description: detailed status info for I2C activity
            typeDefinition:
                '@type': enum
                allowedValues: [Ok, BufferOverrun, AddrNack, DataNack, Other ]
            required: yes
        -   key: T
            name: attempts
            description: how many attempts were made to receive
            typeDefinition:
                '@type': number
            required: yes
        -   key: +
            name: data
            description: the data that was receive
            typeDefinition:
                '@type': bytes
            required: no
        status:
        -   code: TOO_BIG
            meaning: the length requested exceeded the buffer size
        -   code: CMD_FAIL
            meaning: write failed in benign way
        -   code: CMD_ERROR
            meaning: write failed in bad way - serious error
            
            
    -   name: i2cSendReceive
        command: 4
        description: Sends a message to a specified I2C device, then performs a receive without an intervening stop bit
        operation: post
        requestFields:
        -   key: P
            name: port
            description: which port to send to/receive from
            typeDefinition:
                '@type': number
            required: yes
        -   key: A
            name: address
            description: which address to send to/receive from (0-127, or 0-1023 depending on mode)
            typeDefinition:
                '@type': number
            required: yes
        -   key: N
            name: tenBitMode
            description: 'indicates if 10-bit addressing (default: 7 bit)'
            typeDefinition:
                '@type': flag
            required: no
        -   key: T
            name: retries
            description: 'how many times to try the send/receive operation (default: 5)'
            typeDefinition:
                '@type': number
            required: no
        -   key: +
            name: data
            description: the data to send
            typeDefinition:
                '@type': bytes
            required: no
        -   key: L
            name: length
            description: 'number of bytes to attempt to read (default: 0)'
            typeDefinition:
                '@type': number
            required: no
        responseFields:
        -   key: I
            name: resultInfo
            description: detailed status info for I2C activity
            typeDefinition:
                '@type': enum
                allowedValues: [Ok, BufferOverrun, AddrNack, DataNack, Other ]
            required: yes
        -   key: T
            name: attempts
            description: how many attempts we made to send/receive
            typeDefinition:
                '@type': number
            required: yes
        -   key: +
            name: data
            description: the data that was read
            typeDefinition:
                '@type': bytes
            required: no
        status:
        -   code: CMD_FAIL
            meaning: write failed in benign way
        -   code: CMD_ERROR
            meaning: write failed in bad way - serious error